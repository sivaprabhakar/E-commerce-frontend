import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { removeFromCart } from "./Redux/Slices/CartSlice";
import { Container, ListGroup, Button, Image } from "react-bootstrap";
import axios from 'axios'; // Import axios for making HTTP requests

const Cart = () => {
  const cart = useSelector((state) => state.cart);
  const userId = useSelector((state) => state.user.userId); // Assuming you have userId in your Redux state
  const dispatch = useDispatch();

  useEffect(() => {
    if (!userId) return; // Exit early if userId is not available
    // Fetch cart items from the backend when the component mounts
    const fetchCartItems = async () => {
      try {
        // Make a GET request to fetch cart items for the current user
        const response = await axios.get(`/api/cart/${userId}`); // Replace userId with the actual user ID
        // Dispatch action to add fetched cart items to the Redux store
        // Assuming the response data is an array of cart items
        response.data.cart.forEach(item => {
          dispatch(addToCart(item)); // Assuming addToCart action adds the item to the Redux store
        });
      } catch (error) {
        console.error('Error fetching cart items:', error);
      }
    };

    fetchCartItems(); // Call the fetchCartItems function
  }, [dispatch, userId]); // Add dispatch and userId as dependencies

  const handleRemoveFromCart = async (productId) => {
    try {
      const response = await axios.delete('/cart', {
        userId: userId, // Pass the user ID from your authentication system
        productId: productId
      });
      // Dispatch an action to update the cart state in Redux
      dispatch(removeFromCart(productId));
      console.log("Product removed from cart successfully");
    } catch (error) {
      console.error("Error removing product from cart:", error);
    }
  };
  

  return (
    <Container className="my-5">
      <h2 className="text-center mb-4">Shopping Cart</h2>
      {cart.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        <ListGroup>
          {cart.map((item) => (
            <ListGroup.Item key={item.id} className="d-flex align-items-center">
              <div className="d-flex align-items-center flex-grow-1">
                <Image src={item.imageUrl} alt={item.title} className="me-3" style={{ maxWidth: "100px" }} />
                <div>
                  <strong>{item.title}</strong>
                  <p>Price: ${item.price}</p>
                  <p>Quantity: {item.quantity}</p>
                </div>
              </div>
              <div>
                <Button
                  variant="danger"
                  className="me-3"
                  onClick={() => handleRemoveFromCart(item.id)}
                >
                  Remove
                </Button>
                <Button variant="success">Buy Now</Button>
              </div>
            </ListGroup.Item>
          ))}
        </ListGroup>
      )}
    </Container>
  );
};

export default Cart;






import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import Skeleton from "react-loading-skeleton";
import { getProductDetails, addToCart } from "../ApiService/ApiService";
import { useDispatch, useSelector } from "react-redux";
import { FaCartPlus } from 'react-icons/fa';
import Header from "../Header/Header";
import { addToCart as addToCartAction } from '../Redux/Slices/CartSlice';

const Products = () => {
  const { id } = useParams();
  const [loading, setLoading] = useState(true);
  const [product, setProduct] = useState(null);
  const [error, setError] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [successMessage, setSuccessMessage] = useState("");
  const [addToCartHover, setAddToCartHover] = useState(false);
  const [buyNowHover, setBuyNowHover] = useState(false);
  const dispatch = useDispatch();
  const userId = useSelector(state => state.user.userId);

  useEffect(() => {
    setLoading(true);
    setError(null);

    getProductDetails(id)
      .then((res) => {
        console.log("Complete API response:", res);
        if (res && res.product) {
          setProduct(res.product);
        } else {
          console.log("No product found.");
          setError("No product found.");
        }
        setLoading(false);
      })
      .catch((err) => {
        console.error("Error fetching product details:", err);
        setError("Error fetching product details. Please try again.");
        setLoading(false);
      });
  }, [id]);

  const handleAddToCart = async () => {
    try {
      if (!product) {
        console.error("Product not found");
        return;
      }

      const response = await addToCart(userId, product._id, quantity, dispatch);
      console.log("Product added to cart successfully:", response);
      setSuccessMessage("Product added to cart successfully");
      // Clear the success message after a few seconds
      setTimeout(() => {
        setSuccessMessage("");
      }, 3000);
    } catch (error) {
      console.error("Error adding product to cart:", error);
      setError("Error adding product to cart. Please try again.");
    }
  };

  const handleQuantityChange = (value) => {
    setQuantity(quantity + value > 0 ? quantity + value : 1);
  };

  return (
    <>
      <Header />
      <div className="container my-5">
        {loading ? (
          <Skeleton height={700} />
        ) : error ? (
          <div>Error: {error}</div>
        ) : product !== null && product !== undefined ? (
          <div className="row">
            <div className="col-md-6">
              <img src={product.imageUrl} alt={product.title} className="img-fluid rounded mb-4" style={{ maxHeight: '400px' }} />
            </div>
            <div className="col-md-6">
              <h2 className="mb-3">{product.title}</h2>
              <p className="mb-4">{product.description}</p>
              <div className="mb-4">
                <h5>Price: <span className="text-primary">${product.price}</span></h5>
                <div className="d-flex align-items-center mt-3">
                  <span className="me-3">Quantity:</span>
                  <button
                    className="btn btn-outline-dark me-2"
                    onClick={() => handleQuantityChange(-1)}
                  >
                    -
                  </button>
                  <span>{quantity}</span>
                  <button
                    className="btn btn-outline-dark ms-2"
                    onClick={() => handleQuantityChange(1)}
                  >
                    +
                  </button>
                </div>
              </div>
              <div className="d-grid gap-2">
                {/* Add success message here */}
                {successMessage && (
                  <div className="alert alert-success mb-3">
                    {successMessage}
                  </div>
                )}

                {/* Add to Cart button with hover effect */}
                <button
                  className="btn btn-lg"
                  style={{
                    backgroundColor: addToCartHover ? '#e0c815' : '#f8d41f',
                    borderColor: addToCartHover ? '#e0c815' : '#f8d41f'
                  }}
                  onMouseEnter={() => setAddToCartHover(true)}
                  onMouseLeave={() => setAddToCartHover(false)}
                  onClick={handleAddToCart}
                >
                  <FaCartPlus className="me-2" /> Add to Cart
                </button>

                {/* Buy Now button with hover effect */}
                <button
                  className="btn btn-lg mt-3"
                  style={{
                    backgroundColor: buyNowHover ? '#ff7300' : '#ff9900',
                    borderColor: buyNowHover ? '#ff7300' : '#ff9900'
                  }}
                  onMouseEnter={() => setBuyNowHover(true)}
                  onMouseLeave={() => setBuyNowHover(false)}
                >
                  Buy Now
                </button>
              </div>
            </div>
          </div>
        ) : (
          <div>No product found</div>
        )}
      </div>
    </>
  );
};

export default Products;








<Form.Group controlId="formCountry">
                            <Form.Label>Country</Form.Label>
                            <Form.Control
                                type="text"
                                name="country"
                                value={shippingInfo.country}
                                onChange={handleChange}
                                required
                                className="custom-input"
                            />
                        </Form.Group>

                        <Form.Group controlId="formCity">
                            <Form.Label>City</Form.Label>
                            <Form.Control
                                type="text"
                                name="city"
                                value={shippingInfo.city}
                                onChange={handleChange}
                                required
                                className="custom-input"
                            />
                        </Form.Group>

                        <Form.Group controlId="formPhoneNo">
                            <Form.Label>Phone No</Form.Label>
                            <Form.Control
                                type="tel"
                                name="phoneNo"
                                value={shippingInfo.phoneNo}
                                onChange={handleChange}
                                required
                                className="custom-input"
                            />
                        </Form.Group>

                        <Form.Group controlId="formPostalCode">
                            <Form.Label>Postal Code</Form.Label>
                            <Form.Control
                                type="text"
                                name="postalCode"
                                value={shippingInfo.postalCode}
                                onChange={handleChange}
                                required
                                className="custom-input"
                            />
                        </Form.Group>

                        <Form.Group controlId="formPhone">
                            <Form.Label>Phone</Form.Label>
                            <Form.Control
                                type="tel"
                                name="phone"
                                value={phone}
                                onChange={handleChange}
                                required
                                className="custom-input"
                            />
                        </Form.Group>



                        import { createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

// Define the order slice
const orderSlice = createSlice({
  name: 'orders',
  initialState: {
    orders: [],
    loading: false,
    error: null,
  },
  reducers: {
    fetchOrdersRequest(state) {
      state.loading = true;
      state.error = null;
    },
    fetchOrdersSuccess(state, action) {
      state.orders = action.payload;
      state.loading = false;
    },
    fetchOrdersFailure(state, action) {
      state.error = action.payload;
      state.loading = false;
    },
    createOrderRequest(state) {
      state.loading = true;
      state.error = null;
    },
    createOrderSuccess(state, action) {
      state.orders.push(action.payload);
      state.loading = false;
    },
    createOrderFailure(state, action) {
      state.error = action.payload;
      state.loading = false;
    },
    updateOrderRequest(state) {
      state.loading = true;
      state.error = null;
    },
    updateOrderSuccess(state, action) {
      const updatedOrder = action
